class Solution {
public:
    
    int binarysearch(vector<int> nums,int target,int left,int right)
    {
        if(left>right)                                                        // Edge Condition 
            return -1;
        else if (left==right)                                                 // Edge Condition 
        {
            if(nums[left]==target)
                return left;
            else
                return -1;
        }
        else
        {
            int mid=(left+right)/2;
            if(nums[mid]==target)                                              // If MID == Target Element then returns 
                return mid;
            else if(nums[left]<nums[mid])                                      // Check If Left Part is Sorted or Right 
            {
                if(nums[left]<=target && nums[mid]>target)                     // Check If target lies btw Sorted Part, then go to left sorted part or call for right part .
                    return(binarysearch(nums,target,left,mid-1));
                else 
                    return(binarysearch(nums,target,mid+1,right));
            }
            else                                                               // Similarly,For Right Part Also 
            {
                if(target<=nums[right] && target>=nums[mid+1])
                    return(binarysearch(nums,target,mid+1,right));
                else 
                    return(binarysearch(nums,target,left,mid-1));
            }
        }        
    }    
    
    int search(vector<int>& nums, int target) {
        int ans=binarysearch(nums,target,0,nums.size()-1);                              //  Making Modified Binary Search Fun
        return ans;
    }
};
